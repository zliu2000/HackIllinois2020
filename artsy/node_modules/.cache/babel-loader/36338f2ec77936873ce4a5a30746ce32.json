{"ast":null,"code":"var _jsxFileName = \"/Users/jimliu/Documents/GitHub/HackIllinois2020/artsy/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport Sketch from \"react-p5\";\nimport ReactDOM from 'react-dom'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.method = 0;\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  }\n  /*\n    mergeSort() {\n      const animations = getMergeSortAnimations(this.state.array);\n      for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const isColorChange = i % 3 !== 2;\n        if (isColorChange) {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        } else {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n  */\n\n\n  quickSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    this.method = 4;\n    this.reload();\n  }\n\n  bubbleDraw() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    let values = [];\n    let i = 0;\n    let j = 0;\n\n    let bubble_draw = p5 => {\n      p5.background(0);\n\n      if (i < values.length) {\n        for (let j = 0; j < values.length - i - 1; j++) {\n          let a = values[j];\n          let b = values[j + 1];\n\n          if (a > b) {\n            swap(values, j, j + 1);\n          }\n        }\n      } else {\n        console.log(\"finished\");\n        p5.noLoop();\n      } //we're on the jth rectangle\n\n\n      for (let j = 0; j < values.length; j++) {\n        if (j == values.length - i) {\n          p5.fill('red');\n        } else if (j > values.length - i - 1) {\n          p5.fill('green');\n        } else {\n          p5.fill('white');\n        }\n\n        p5.rect(fat * j, p5.height - values[j], fat, values[j]);\n      }\n\n      i++;\n    };\n\n    function swap(arr, a, b) {\n      let temp = arr[a];\n      arr[a] = arr[b];\n      arr[b] = temp;\n    }\n\n    let fat = 7.5;\n    return React.createElement(Sketch, {\n      setup: (p5, parentRef) => {\n        p5.createCanvas(p5.windowWidth, p5.windowHeight);\n        values = new Array(Math.floor(p5.width / fat * 0.75));\n\n        for (let i = 0; i < values.length; i++) {\n          values[i] = p5.random(p5.height); //values[i] = noise(i/100.0)*height;\n        }\n      },\n      draw: bubble_draw,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    });\n  }\n  /*\n    // NOTE: This method will only work if your sorting algorithms actually return\n    // the sorted arrays; if they return the animations (as they currently do), then\n    // this method will be broken.\n    testSortingAlgorithms() {\n      for (let i = 0; i < 100; i++) {\n        const array = [];\n        const length = randomIntFromInterval(1, 1000);\n        for (let i = 0; i < length; i++) {\n          array.push(randomIntFromInterval(-1000, 1000));\n        }\n        const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n        const mergeSortedArray = getMergeSortAnimations(array.slice());\n        console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n      }\n    }\n  */\n\n\n  reload() {\n    var container = document.getElementById(\"myDiv\");\n    var content = container.innerHTML;\n    container.innerHTML = content;\n  } //runs sorting method vis. based on method id\n  //0 for not chosen\n  //3 for bubblesort\n\n\n  runMethod() {\n    if (this.method == 0) {\n      return \"Choose a sorting method!\";\n    }\n\n    if (this.method == 4) {\n      return this.bubbleDraw();\n    }\n\n    return \"Whoops!\";\n  }\n\n  render() {\n    //https://stackoverflow.com/questions/10841239/enabling-refreshing-for-specific-html-elements-only\n    return React.createElement(\"div\", {\n      className: \"array-container\",\n      id: \"myDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Generate New Array\"), React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Bubble Sort\"), React.createElement(\"button\", {\n      onClick: () => this.testSortingAlgorithms(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Test Sorting Algorithms (BROKEN)\"), React.createElement(\"div\", {\n      id: \"the thing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, () => this.runMethod()));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/jimliu/Documents/GitHub/HackIllinois2020/artsy/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","Sketch","ReactDOM","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","method","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","quickSort","heapSort","bubbleSort","reload","bubbleDraw","values","j","bubble_draw","p5","background","length","a","b","swap","console","log","noLoop","fill","rect","fat","height","arr","temp","parentRef","createCanvas","windowWidth","windowHeight","Array","Math","floor","width","random","container","document","getElementById","content","innerHTML","runMethod","render","mergeSort","testSortingAlgorithms","min","max","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport Sketch from \"react-p5\";\nimport ReactDOM from 'react-dom';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({array});\n  }\n/*\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n*/\n  method = 0;\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    this.method = 4;\n    this.reload();\n  }\n  bubbleDraw() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    let values = [];\n\n    let i = 0;\n    let j = 0;\n    let bubble_draw = p5 => {\n      p5.background(0);\n      if (i < values.length) {\n        for (let j = 0; j < (values.length) - i - 1; j++) {\n          let a = values[j];\n          let b = values[j + 1];\n          if (a > b) {\n            swap(values, j, j + 1);\n          }\n        }\n      } else {\n        console.log(\"finished\");\n        p5.noLoop();\n      }\n      //we're on the jth rectangle\n      for (let j = 0; j < values.length; j++) {\n        if (j == values.length - i)\n        {\n          p5.fill('red');\n        }\n        else if (j > values.length - i - 1)\n        {\n          p5.fill('green');\n        }\n        else {\n          p5.fill('white');\n        }\n        p5.rect(fat * j, p5.height - values[j], fat, values[j]);\n      }\n      i++;\n    };\n    function swap(arr, a, b) {\n      let temp = arr[a];\n      arr[a] = arr[b];\n      arr[b] = temp;\n    }\n    let fat = 7.5;\n    return (\n        <Sketch\n\t\t\t\t\tsetup={(p5, parentRef) => {\n            p5.createCanvas(p5.windowWidth, p5.windowHeight);\n            values = new Array(Math.floor(p5.width / fat * 0.75));\n            for (let i = 0; i < values.length; i++) {\n              values[i] = p5.random(p5.height);\n              //values[i] = noise(i/100.0)*height;\n            }\n\t\t\t\t\t}}\n\t\t\t\t\tdraw={bubble_draw}\n\t\t\t\t/>\n    );\n  }\n/*\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n*/\n  reload(){\n    var container = document.getElementById(\"myDiv\");\n    var content = container.innerHTML;\n    container.innerHTML= content;\n  }\n  //runs sorting method vis. based on method id\n  //0 for not chosen\n  //3 for bubblesort\n  runMethod() {\n    if (this.method == 0)\n    {\n      return (\"Choose a sorting method!\");\n    }\n    if (this.method == 4)\n    {\n      return this.bubbleDraw();\n    }\n    return (\"Whoops!\");\n\n  }\n\n\n  render() {\n    //https://stackoverflow.com/questions/10841239/enabling-refreshing-for-specific-html-elements-only\n    return (\n      <div className=\"array-container\" id = \"myDiv\">\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\n          <button onClick={() => this.quickSort()}>Quick Sort</button>\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\n          <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          <button onClick={() => this.testSortingAlgorithms()}>\n            Test Sorting Algorithms (BROKEN)\n          </button>\n          <div id = \"the thing\">\n          {() => this.runMethod()}\n          </div>\n      </div>\n\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}