{"ast":null,"code":"var _jsxFileName = \"/Users/jimliu/Documents/GitHub/HackIllinois2020/artsy/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport Sketch from \"react-p5\";\nimport ReactDOM from 'react-dom'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setup = (p5, parentRef) => {\n      p5.createCanvas(200, 200).parent(parentRef);\n    };\n\n    this.draw = p5 => {\n      p5.background(0);\n      p5.fill(255, this.y * 1.3, 0);\n      p5.ellipse(p5.width / 2, this.y, 50);\n      if (this.y > p5.height) this.direction = '';\n\n      if (this.y < 0) {\n        this.direction = '^';\n      }\n\n      if (this.direction === '^') this.y += 8;else this.y -= 4;\n    };\n\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  }\n  /*\n    mergeSort() {\n      const animations = getMergeSortAnimations(this.state.array);\n      for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const isColorChange = i % 3 !== 2;\n        if (isColorChange) {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        } else {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n  */\n\n\n  quickSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    return React.createElement(Sketch, {\n      setup: (p5, parentRef) => {\n        p5.createCanvas(p5.windowWidth, p5.windowHeight);\n        values = new Array(Math.floor(p5.width / fat * 0.75));\n\n        for (let i = 0; i < values.length; i++) {\n          values[i] = p5.random(p5.height); //values[i] = noise(i/100.0)*height;\n        }\n      },\n      draw: bubble_draw,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    });\n  }\n  /*\n    // NOTE: This method will only work if your sorting algorithms actually return\n    // the sorted arrays; if they return the animations (as they currently do), then\n    // this method will be broken.\n    testSortingAlgorithms() {\n      for (let i = 0; i < 100; i++) {\n        const array = [];\n        const length = randomIntFromInterval(1, 1000);\n        for (let i = 0; i < length; i++) {\n          array.push(randomIntFromInterval(-1000, 1000));\n        }\n        const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n        const mergeSortedArray = getMergeSortAnimations(array.slice());\n        console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n      }\n    }\n  */\n\n\n  render() {\n    let values = [];\n    let i = 0;\n    let j = 0;\n\n    let bubble_draw = p5 => {\n      p5.background(0);\n\n      if (i < values.length) {\n        for (let j = 0; j < values.length - i - 1; j++) {\n          let a = values[j];\n          let b = values[j + 1];\n\n          if (a > b) {\n            swap(values, j, j + 1);\n          }\n        }\n      } else {\n        console.log(\"finished\");\n        p5.noLoop();\n      } //we're on the jth rectangle\n\n\n      for (let j = 0; j < values.length; j++) {\n        if (j == values.length - i) {\n          p5.fill('red');\n        } else if (j > values.length - i - 1) {\n          p5.fill('green');\n        } else {\n          p5.fill('white');\n        }\n\n        p5.rect(fat * j, p5.height - values[j], fat, values[j]);\n      }\n\n      i++;\n    };\n\n    function swap(arr, a, b) {\n      let temp = arr[a];\n      arr[a] = arr[b];\n      arr[b] = temp;\n    }\n\n    let fat = 7.5;\n    return React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Generate New Array\"), React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Bubble Sort\"), React.createElement(\"button\", {\n      onClick: () => this.testSortingAlgorithms(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Test Sorting Algorithms (BROKEN)\"));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/jimliu/Documents/GitHub/HackIllinois2020/artsy/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","Sketch","ReactDOM","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","setup","p5","parentRef","createCanvas","parent","draw","background","fill","y","ellipse","width","height","direction","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","quickSort","heapSort","bubbleSort","windowWidth","windowHeight","values","Array","Math","floor","fat","length","random","bubble_draw","render","j","a","b","swap","console","log","noLoop","rect","arr","temp","mergeSort","testSortingAlgorithms","min","max","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport Sketch from \"react-p5\";\nimport ReactDOM from 'react-dom';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  setup = (p5, parentRef) => {\n\t\t\t\t\t\tp5.createCanvas(200, 200).parent(parentRef);\n\t\t\t\t\t};\n  draw = p5 => {\n\t\t\t\t\t\tp5.background(0);\n\t\t\t\t\t\tp5.fill(255, this.y * 1.3, 0);\n\t\t\t\t\t\tp5.ellipse(p5.width / 2, this.y, 50);\n\t\t\t\t\t\tif (this.y > p5.height) this.direction = '';\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\tthis.direction = '^';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.direction === '^') this.y += 8;\n\t\t\t\t\t\telse this.y -= 4;\n\t\t\t\t\t};\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({array});\n  }\n/*\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n*/\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    return (<Sketch\n      setup={(p5, parentRef) => {\n        p5.createCanvas(p5.windowWidth, p5.windowHeight);\n        values = new Array(Math.floor(p5.width / fat * 0.75));\n        for (let i = 0; i < values.length; i++) {\n          values[i] = p5.random(p5.height);\n          //values[i] = noise(i/100.0)*height;\n        }\n      }}\n      draw={bubble_draw}\n    />);\n  }\n/*\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n*/\n\n\n  render() {\n    let values = [];\n\n    let i = 0;\n    let j = 0;\n    let bubble_draw = p5 => {\n      p5.background(0);\n      if (i < values.length) {\n        for (let j = 0; j < (values.length) - i - 1; j++) {\n          let a = values[j];\n          let b = values[j + 1];\n          if (a > b) {\n            swap(values, j, j + 1);\n          }\n        }\n      } else {\n        console.log(\"finished\");\n        p5.noLoop();\n      }\n      //we're on the jth rectangle\n      for (let j = 0; j < values.length; j++) {\n        if (j == values.length - i)\n        {\n          p5.fill('red');\n        }\n        else if (j > values.length - i - 1)\n        {\n          p5.fill('green');\n        }\n        else {\n          p5.fill('white');\n        }\n        p5.rect(fat * j, p5.height - values[j], fat, values[j]);\n      }\n      i++;\n    };\n    function swap(arr, a, b) {\n      let temp = arr[a];\n      arr[a] = arr[b];\n      arr[b] = temp;\n    }\n    let fat = 7.5;\n    return (\n      <div className=\"array-container\">\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.testSortingAlgorithms()}>\n          Test Sorting Algorithms (BROKEN)\n        </button>\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}