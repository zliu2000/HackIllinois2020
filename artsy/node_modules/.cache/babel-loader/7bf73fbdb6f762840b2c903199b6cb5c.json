{"ast":null,"code":"import _slicedToArray from \"/Users/jimliu/Documents/GitHub/HackIllinois2020/artsy/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jimliu/Documents/GitHub/HackIllinois2020/artsy/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\nimport Sketch from \"react-p5\";\nimport ReactDOM from 'react-dom'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setup = (p5, parentRef) => {\n      p5.createCanvas(200, 200).parent(parentRef);\n    };\n\n    this.draw = p5 => {\n      p5.background(0);\n      p5.fill(255, this.y * 1.3, 0);\n      p5.ellipse(p5.width / 2, this.y, 50);\n      if (this.y > p5.height) this.direction = '';\n\n      if (this.y < 0) {\n        this.direction = '^';\n      }\n\n      if (this.direction === '^') this.y += 8;else this.y -= 4;\n    };\n\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const _animations$i = _slicedToArray(animations[i], 2),\n              barOneIdx = _animations$i[0],\n              barTwoIdx = _animations$i[1];\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const _animations$i2 = _slicedToArray(animations[i], 2),\n                barOneIdx = _animations$i2[0],\n                newHeight = _animations$i2[1];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {} // We leave it as an exercise to the viewer of this code to implement this method.\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const array = this.state.array;\n    return React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: \"\".concat(value, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Generate New Array\"), React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Bubble Sort\"), React.createElement(\"button\", {\n      onClick: () => this.testSortingAlgorithms(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Test Sorting Algorithms (BROKEN)\"), React.createElement(Sketch, {\n      setup: (p5, parentRef) => {\n        p5.createCanvas(200, 200).parent(parentRef);\n      },\n      draw: p5 => {\n        p5.background(0);\n        p5.fill(255, this.y * 1.3, 0);\n        p5.ellipse(p5.width / 2, this.y, 50);\n        if (this.y > p5.height) this.direction = '';\n\n        if (this.y < 0) {\n          this.direction = '^';\n        }\n\n        if (this.direction === '^') this.y += 8;else this.y -= 4;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/jimliu/Documents/GitHub/HackIllinois2020/artsy/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","Sketch","ReactDOM","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","setup","p5","parentRef","createCanvas","parent","draw","background","fill","y","ellipse","width","height","direction","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","quickSort","heapSort","bubbleSort","testSortingAlgorithms","javaScriptSortedArray","slice","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","render","map","value","idx","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\nimport Sketch from \"react-p5\";\nimport ReactDOM from 'react-dom';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  setup = (p5, parentRef) => {\n\t\t\t\t\t\tp5.createCanvas(200, 200).parent(parentRef);\n\t\t\t\t\t};\n  draw = p5 => {\n\t\t\t\t\t\tp5.background(0);\n\t\t\t\t\t\tp5.fill(255, this.y * 1.3, 0);\n\t\t\t\t\t\tp5.ellipse(p5.width / 2, this.y, 50);\n\t\t\t\t\t\tif (this.y > p5.height) this.direction = '';\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\tthis.direction = '^';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.direction === '^') this.y += 8;\n\t\t\t\t\t\telse this.y -= 4;\n\t\t\t\t\t};\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.testSortingAlgorithms()}>\n          Test Sorting Algorithms (BROKEN)\n        </button>\n        <Sketch\n\t\t\t\t\tsetup={(p5, parentRef) => {\n\t\t\t\t\t\tp5.createCanvas(200, 200).parent(parentRef);\n\t\t\t\t\t}}\n\t\t\t\t\tdraw={p5 => {\n\t\t\t\t\t\tp5.background(0);\n\t\t\t\t\t\tp5.fill(255, this.y * 1.3, 0);\n\t\t\t\t\t\tp5.ellipse(p5.width / 2, this.y, 50);\n\t\t\t\t\t\tif (this.y > p5.height) this.direction = '';\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\tthis.direction = '^';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.direction === '^') this.y += 8;\n\t\t\t\t\t\telse this.y -= 4;\n\t\t\t\t\t}}\n\t\t\t\t/>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}